/*

  MSE 2202 MSEBot Project
  Language: Arduino
  Authors: Group 16
  Date: current

  Rev 1 - Initial version
  Rev 2 - Update for MSEduino v. 2

*/


#include <Servo.h>
#include <EEPROM.h>
#include <uSTimer2.h>
#include <CharliePlexM.h>
#include <Wire.h>
#include <I2CEncoder.h>

Servo servo_leftMotor;
Servo servo_rightMotor;
Servo servo_slideMotor;
Servo servo_rollerMotor;  //might just connect it to power

I2CEncoder encoder_leftMotor;
I2CEncoder encoder_rightMotor;

//pins
const int frontLeftPing = 2;   //input plug
const int frontLeftData = 3;   //output plug
const int frontRightPing = 4;
const int frontRightData = 5;
const int leftPing = 10;
const int leftData = 11;
const int rightPing = 12;
const int rightData = 13;
const int leftMotor = 8;
const int rightMotor = 9;
const int slideMotor = 6;
const int rollerMotor = 7;  //might just connect it to power
const int modeButton = 7;
const int motorEnableSwitch = 12;
const int bumper = A2;
const int lightSensor = A3;
const int ci_I2C_SDA = A4;         //I2C data = white
const int ci_I2C_SCL = A5;         //I2C clock = yellow

//charlieplexing
const int led1 = 4;
const int led2 = 5;
const int led3 = 6;
const int led4 = 7;
const int heartbeatLed = 1;
const int indicatorLed = 4;

//constants
const int forwardSpeed = 1700;
const int reverseSpeed = 1300;
const int forwardSlow = 1600;
const int reverseSlow = 1400;
const int brake = 1500;
const int straightnessTolerance = 50;
const int ninety = 750;
const int one80 = 2300;
const int three60 = 5200;
const int turnStart = 500;
const int displayTime = 500;
const int slideRetracted = 0;
const int slideExtended = 1000;
const int motorCalibrationCycles = 3;
const int motorCalibrationTime = 5000;
const int leftMotorOffsetAddress_L = 12;
const int leftMotorOffsetAddress_H = 13;
const int rightMotorOffsetAddress_L = 14;
const int rightMotorOffsetAddress_H = 15;

//variables
long leftMotorPosition;
long rightMotorPosition;
unsigned long tempTimer = 0;
unsigned long chargeTimer = 0;
unsigned long frontLeftEcho;
unsigned long frontRightEcho;
unsigned long leftEcho;
unsigned long rightEcho;
unsigned long tempLeftEcho;
unsigned long tempRightEcho;
unsigned long threeSecondTimer = 0;
unsigned long tempDisplayTime;
unsigned long calibrationTime;
unsigned long leftMotorOffset;
unsigned long rightMotorOffset;
unsigned phaseA = 1; //overall logic
unsigned phaseB = 1; //finding the beacon
unsigned phaseC = 1; //avoiding obstacles
unsigned phaseD = 1; //
unsigned dumbCount = 0;
unsigned infra; //infrared sensor reading
unsigned leftMotorSpeed;
unsigned rightMotorSpeed;
unsigned calCount;
unsigned calCycle;
bool turnFlag = true;
bool startingTurn;
bool motorsEnabled = true;
byte b_lowByte;
byte b_highByte;

unsigned int  robotStateIndex = 0;
//0123456789ABCDEF
unsigned int  modeIndicator[6] = {
  0x00,    //B0000000000000000,  //Stop
  0x00FF,  //B0000000011111111,  //Run
  0xAAAA,  //B1010101010101010,  //Calibrate motors
  0xFFFF   //B1111111111111111   //Unused
};

unsigned int  modeIndicatorIndex = 0;

//display Bits 0,1,2,3, 4, 5, 6,  7,  8,  9,  10,  11,  12,  13,   14,   15
int  iArray[16] = {
  1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 65536
};
int  iArrayIndex = 0;

bool bt_heartbeat = true;
bool bt_3sTimeUp = false;
bool bt_doOnce = false;
bool bt_calInitialized = false;


void setup() {
  Wire.begin();        // Wire library required for I2CEncoder library
  Serial.begin(9600);

  CharliePlexM::setBtn(led1, led2, led3, led4, modeButton);

  //set up ultrasonic sensors
  pinMode(frontLeftPing, OUTPUT);
  pinMode(frontLeftData, INPUT);
  pinMode(frontRightPing, OUTPUT);
  pinMode(frontRightData, INPUT);
  pinMode(leftPing, OUTPUT);
  pinMode(leftData, INPUT);
  pinMode(rightPing, OUTPUT);
  pinMode(rightData, INPUT);
  //pinMode(topPing, OUTPUT);
  //pinMode(topData, INPUT);

  //set up motors
  pinMode(rightMotor, OUTPUT);
  servo_rightMotor.attach(rightMotor);
  pinMode(leftMotor, OUTPUT);
  servo_leftMotor.attach(leftMotor);
  pinMode(slideMotor, OUTPUT);
  servo_slideMotor.attach(slideMotor);
  /*pinMode(rollerMotor, OUTPUT);           likely unnecessary
    servo_rollerMotor.attach(rollerMotor);*/

  //set up bumper and motor enable switch
  pinMode(bumper, INPUT_PULLUP);
  pinMode(motorEnableSwitch, INPUT);

  //set up encoders
  encoder_leftMotor.init(1.0 / 3.0 * MOTOR_393_SPEED_ROTATIONS, MOTOR_393_TIME_DELTA);
  encoder_leftMotor.setReversed(false);  // adjust for positive count when moving forward
  encoder_rightMotor.init(1.0 / 3.0 * MOTOR_393_SPEED_ROTATIONS, MOTOR_393_TIME_DELTA);
  encoder_rightMotor.setReversed(true);  // adjust for positive count when moving forward

  //read saved values from EEPROM
  b_lowByte = EEPROM.read(leftMotorOffsetAddress_L);
  b_highByte = EEPROM.read(leftMotorOffsetAddress_H);
  leftMotorOffset = word(b_highByte, b_lowByte);
  b_lowByte = EEPROM.read(rightMotorOffsetAddress_L);
  b_highByte = EEPROM.read(rightMotorOffsetAddress_H);
  rightMotorOffset = word(b_highByte, b_lowByte);
}


void loop() {
  if ((millis() - threeSecondTimer) >= 3000)
  {
    bt_3sTimeUp = true;
  }

  // button-based mode selection
  if (CharliePlexM::ui_Btn)
  {
    if (bt_doOnce == false)
    {
      bt_doOnce = true;
      robotStateIndex++;
      robotStateIndex = robotStateIndex & 7;
      threeSecondTimer = millis();
      bt_3sTimeUp = false;
      bt_calInitialized = false;
      calCycle = 0;
    }
  }
  else
  {
    bt_doOnce = LOW;
  }

  // check if drive motors should be powered
  motorsEnabled = digitalRead(motorEnableSwitch);

  // modes
  // 0 = default after power up/reset
  // 1 = Press mode button once to enter. Run robot.
  // 4 = Press mode button four times to enter. Calibrate motor speeds to drive straight.
  switch (robotStateIndex)
  {
    case 0:    //default state
      leftEcho = ping(leftPing, leftData);
      rightEcho = ping(rightPing, rightData);
      servo_leftMotor.writeMicroseconds(brake);
      servo_rightMotor.writeMicroseconds(brake);
      servo_slideMotor.write(slideRetracted);
      encoder_leftMotor.zero();
      encoder_rightMotor.zero();
      modeIndicatorIndex = 0;
      /*if(leftEcho > rightEcho)    to determine the first turn at the start of each round (assuming the robot is starting on the same side as the charging station)
        {
        turnFlag = false;
        startingTurn = false;
        }
        else
        {
        turnFlag = true;
        startingTurn = true;
        }*/
      break;

    case 1:    //run robot
      if (bt_3sTimeUp)
      {
        //set motor speeds
        leftMotorSpeed = constrain(forwardSpeed + leftMotorOffset, 1600, 2100);
        rightMotorSpeed = constrain(forwardSpeed + rightMotorOffset, 1600, 2100);
        if (millis() - chargeTimer == 70000) //test to find how long it takes to reach the charging station
        {
          phaseA = 3;
        }
        switch (phaseA)
        {
          case 1:
            frontLeftEcho = ping(frontLeftPing, frontLeftData);
            frontRightEcho = ping(frontRightPing, frontRightData);
            break;
          case 2:
            uTurn(turnFlag);
            break;
          case 3:
            infra = analogRead(lightSensor);
            findBeacon();
            break;
          case 4:
            obstacleAvoidance();
            break;
        }

        if (motorsEnabled == true)
        {
          servo_leftMotor.writeMicroseconds(leftMotorSpeed);
          servo_rightMotor.writeMicroseconds(rightMotorSpeed);
        }
        if (motorsEnabled == false)
        {
          servo_leftMotor.writeMicroseconds(brake);
          servo_rightMotor.writeMicroseconds(brake);
        }
        modeIndicatorIndex = 1;
      }
      break;

    case 4:    //calibrate motors

      if (bt_3sTimeUp)
      {
        if (!bt_calInitialized)
        {
          bt_calInitialized = true;
          encoder_leftMotor.zero();
          encoder_rightMotor.zero();
          calibrationTime = millis();
          servo_leftMotor.writeMicroseconds(forwardSpeed);
          servo_rightMotor.writeMicroseconds(forwardSpeed);
        }
        else if ((millis() - calibrationTime) > motorCalibrationTime)
        {
          servo_leftMotor.writeMicroseconds(brake);
          servo_rightMotor.writeMicroseconds(brake);
          leftMotorPosition = encoder_leftMotor.getRawPosition();
          rightMotorPosition = encoder_rightMotor.getRawPosition();
          if (leftMotorPosition > rightMotorPosition)
          {
            // May have to update this if different calibration time is used
            rightMotorOffset = 0;
            leftMotorOffset = (leftMotorPosition - rightMotorPosition) / 4;
          }
          else
          {
            // May have to update this if different calibration time is used
            rightMotorOffset = (rightMotorPosition - leftMotorPosition) / 4;
            leftMotorOffset = 0;
          }

          EEPROM.write(rightMotorOffsetAddress_L, lowByte(rightMotorOffset));
          EEPROM.write(rightMotorOffsetAddress_H, highByte(rightMotorOffset));
          EEPROM.write(leftMotorOffsetAddress_L, lowByte(leftMotorOffset));
          EEPROM.write(leftMotorOffsetAddress_H, highByte(leftMotorOffset));

          robotStateIndex = 0;    //go back to Mode 0
        }
        modeIndicatorIndex = 4;
      }
      break;
  }

  if ((millis() - tempDisplayTime) > displayTime)
  {
    tempDisplayTime = millis();
    bt_heartbeat = !bt_heartbeat;
    CharliePlexM::Write(heartbeatLed, bt_heartbeat);
    digitalWrite(13, bt_heartbeat);
    indicator();
  }
}


// set mode indicator LED state
void indicator() {
  //display routine, if true turn on led
  CharliePlexM::Write(indicatorLed, !(modeIndicator[modeIndicatorIndex] & (iArray[iArrayIndex])));
  iArrayIndex++;
  iArrayIndex = iArrayIndex & 15;
}


// measure distance to target using ultrasonic sensor
unsigned long ping(const int p, const int d)
{
  //Ping Ultrasonic
  //Send the Ultrasonic Range Finder a 10 microsecond pulse per tech spec
  digitalWrite(p, HIGH);
  delayMicroseconds(10);  //The 10 microsecond pause where the pulse in "high"
  digitalWrite(p, LOW);
  //use command pulseIn to listen to Ultrasonic_Data pin to record the
  //time that it takes from when the Pin goes HIGH until it goes LOW
  return pulseIn(d, HIGH, 10000);

  // Print Sensor Readings
#ifdef DEBUG_ULTRASONIC
  Serial.print("Time (microseconds): ");
  Serial.print(ul_Echo_Time, DEC);
  Serial.print(", Inches: ");
  Serial.print(ul_Echo_Time / 148); //divide time by 148 to get distance in inches
  Serial.print(", cm: ");
  Serial.println(ul_Echo_Time / 58); //divide time by 58 to get distance in cm
#endif
}


void driveStraight() {
  if (frontLeftEcho <= turnStart && frontRightEcho <= turnStart)  //wall is reached
  {
    motorsEnabled = false;
    dumbCount++;
  }
  if (dumbCount >= 200)
  {
    encoder_leftMotor.zero();
    encoder_rightMotor.zero();
    dumbCount = 0;
    phaseA = 2;
  }
  if ((frontLeftEcho <= turnStart && frontRightEcho >= turnStart * 4) || (frontLeftEcho <= turnStart * 4 && frontRightEcho >= turnStart)) //obstacle is reached
  {
    motorsEnabled = false;
    encoder_leftMotor.zero();
    encoder_rightMotor.zero();
    phaseA = 4;
  }
  else
  {
    leftMotorSpeed = forwardSpeed;
    rightMotorSpeed = forwardSpeed;
    motorsEnabled = true;
  }
}


void uTurn(bool direction) {
  if (direction == false)  //left turn
  {
    leftMotorSpeed = brake;
    rightMotorSpeed = forwardSpeed;
    motorsEnabled = true;
    if (encoder_rightMotor.getRawPosition() >= one80)
    {
      turnFlag = true;
      phaseA = 1;
    }
  }
  else  //right turn
  {
    leftMotorSpeed = forwardSpeed;
    rightMotorSpeed = brake;
    motorsEnabled = true;
    if (encoder_leftMotor.getRawPosition() >= one80)
    {
      turnFlag = false;
      phaseA = 1;
    }
  }
}


void findBeacon() {
  switch (phaseB)
  {
    case 1: //stop driving and zero encoders
      motorsEnabled = false;
      encoder_leftMotor.zero();
      encoder_rightMotor.zero();
      phaseB = 2;
    case 2: //rotate counter-clockwise > 360 degrees
      leftMotorSpeed = brake;
      rightMotorSpeed = forwardSlow;
      motorsEnabled = true;
      if (encoder_rightMotor.getRawPosition() >= three60)
      {
        encoder_leftMotor.zero();
        encoder_rightMotor.zero();
        phaseB = 3;
      }
      if (infra <= 500)
      {
        motorsEnabled = false;
        phaseB = 4;
      }
    case 3: //look elsewhere
      leftMotorSpeed = forwardSpeed;
      rightMotorSpeed = forwardSpeed;
      motorsEnabled = true;
      if (encoder_leftMotor.getRawPosition() >= three60 && encoder_rightMotor.getRawPosition() >= three60)
      {
        encoder_leftMotor.zero();
        encoder_rightMotor.zero();
        phaseB = 1;
      }
    case 4: //move towards beacon and adjust angle
      if (infra > 500) //wiggle until back in sight
      {
        if (encoder_leftMotor.getRawPosition() < encoder_rightMotor.getRawPosition())
        {
          leftMotorSpeed = forwardSlow;
          rightMotorSpeed = reverseSlow;
        }
        else
        {
          leftMotorSpeed = reverseSlow;
          rightMotorSpeed = forwardSlow;
        }
        motorsEnabled = true;
      }
      if (digitalRead(bumper) == 0) //bumper was pressed
      {
        motorsEnabled = false;
        tempTimer = millis();
        phaseB = 5;
      }
      else
      {
        leftMotorSpeed = reverseSpeed;
        rightMotorSpeed = reverseSpeed;
        motorsEnabled = true;
      }
    case 5:
      servo_slideMotor.write(slideExtended);
      if (millis() - tempTimer >= 5000) //allow time for the slide to raise and the parts to fall
      {
        encoder_leftMotor.zero();
        encoder_rightMotor.zero();
        turnFlag = startingTurn;
        phaseB = 1;
        phaseA = 1;
      }
  }
}


void obstacleAvoidance() {
  switch (phaseC)
  {
    case 1:
      if (turnFlag == false)  //left turn on the spot
      {
        leftMotorSpeed = reverseSpeed;
        rightMotorSpeed = forwardSpeed;
        motorsEnabled = true;
        if (encoder_rightMotor.getRawPosition() >= ninety)
        {
          motorsEnabled = false;
          encoder_leftMotor.zero();
          encoder_rightMotor.zero();
          phaseC = 2;
        }
      }
      else  //turn right on the spot
      {
        leftMotorSpeed = forwardSpeed;
        rightMotorSpeed = reverseSpeed;
        motorsEnabled = true;
        if (encoder_leftMotor.getRawPosition() >= ninety)
        {
          motorsEnabled = false;
          encoder_leftMotor.zero();
          encoder_rightMotor.zero();
          phaseC = 2;
        }
      }
    case 2: //drive forward a bit
      leftMotorSpeed = forwardSpeed;
      rightMotorSpeed = forwardSpeed;
      motorsEnabled = true;
      if (encoder_leftMotor.getRawPosition() >= ninety)
      {
        motorsEnabled = false;
        leftEcho = ping(leftPing, leftData);
        rightEcho = ping(rightPing, rightData);
        encoder_leftMotor.zero();
        encoder_rightMotor.zero();
        phaseC = 3;
      }
    case 3: //turn towards the side with the greater distance
      if (turnFlag == false)
      {
        if (leftEcho < rightEcho)
        {
          leftMotorSpeed = forwardSpeed;
          rightMotorSpeed = reverseSpeed;
        }
        else
        {
          leftMotorSpeed = reverseSpeed;
          rightMotorSpeed = forwardSpeed;
          turnFlag = true;  //a u-turn has just been performed
        }
        motorsEnabled = true;
      }
      if (turnFlag == true)
      {
        if (leftEcho > rightEcho)
        {
          leftMotorSpeed = reverseSpeed;
          rightMotorSpeed = forwardSpeed;
        }
        else
        {
          leftMotorSpeed = forwardSpeed;
          rightMotorSpeed = reverseSpeed;
          turnFlag = true;  //a u-turn has just been performed
        }
        motorsEnabled = true;
      }
      if (encoder_leftMotor.getRawPosition() >= ninety || encoder_rightMotor.getRawPosition() >= ninety)
      {
        motorsEnabled = false;
        phaseC = 1;
        phaseA = 1;
      }
  }
}


void driveCorrection() {
  if(encoder_leftMotor.getRawPosition() - encoder_rightMotor.getRawPosition() >= straightnessTolerance)  //left motor is ahead
  {
    leftMotorSpeed = brake;
  }
  if(encoder_rightMotor.getRawPosition() - encoder_leftMotor.getRawPosition() >= straightnessTolerance)  //right motor is ahead
  {
    rightMotorSpeed = brake;
  }
}
